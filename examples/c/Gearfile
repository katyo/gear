/* -*- mode: js2 -*- */
import tools from "./tools";
import { remove, exec } from "system";

let src_dir = base.child("src");
let inc_dir = base.child("include");
let out_dir = dest.child("debug");
let obj_dir = out_dir.child("obj");
let lib_dir = out_dir;
let bin_dir = out_dir;

let {cc, ar, ld} = tools({obj_dir, lib_dir, inc_dir, bin_dir});

let build = root.scope("build");
let build_all = root.goal("build", "Build all", async function build() {
    console.log("build complete");
});
let clean_all = root.goal("clean", "Clean all", async function clean() {
    await remove(out_dir.path);
    console.log("clean complete");
});
let run = root.scope("run");

export default async function() {
    let lib_srcs = [
        "hello.c",
        "bye.c",
    ].map((src) => src_dir.input(src));

    let bin_srcs = [
        "main.c"
    ].map((src) => src_dir.input(src));

    let lib_objs = lib_srcs.map(cc);
    let bin_objs = bin_srcs.map(cc);

    let lib = ar("hello", lib_objs);
    let bin = ld("hello", [...bin_objs, lib]);

    let build_bin = build.goal("bin", "Build main binary");
    build_bin.inputs = bin;

    let build_lib = build.goal("lib", "Build library");
    build_lib.inputs = lib;

    let run_bin = run.goal("bin", "Run main executable", async function run_bin() {
        console.info(`run ${bin.name}`);
        let res;
        try {
            res = await exec({ cmd: bin.name });
        } catch (error) {
            console.error(`Error when running compiled binary "${bin.name}": ${error.message}`);
        }
        if (res.status != 0) {
            console.warn(`Non zero exit code ${res.status} when executing "${bin.name}"`);
        }
        if (res.output) {
            console.warn(`${bin.name} (stdout): ${res.output}`);
        }
        if (res.error) {
            console.error(`${bin.name} (stderr): ${res.error}`);
        }
    });
    run_bin.inputs = bin;

    build_all.inputs = [build_lib.input, build_bin.input];
}
