/* -*- mode: js2 -*- */
import { Rule } from "gear";
//import { Gcc } from "toolchain";

let src_dir = base.child("src");
let out_dir = base.child("target");
let obj_dir = out_dir.child("obj");
let bin_dir = out_dir;

let build_all = root.goal("build", "Build all binaries");
let clean_all = root.goal("clean", "Clean all binaries", async function clean() {
    console.log("clean!");
});

function cc(src) {
    let obj = obj_dir.output(src.name.replace(/.c$/, '.o'));
    Rule(src, obj, async function compile() {
        console.log("cc");
        for (let input of this.inputs) {
            console.log("input: ", input.path);
        }
        for (let output of this.outputs) {
            console.log("output: ", output.path);
        }
    });
    return obj.input;
}

function ld(name, objs) {
    let bin = bin_dir.output(name);
    Rule(objs, bin, async function link() {
        console.log("ld");
        for (let input of this.inputs) {
            console.log("input: ", input.path);
        }
        for (let output of this.outputs) {
            console.log("output: ", output.path);
        }
    });
    return bin.input;
}

export default async function() {
    /*let gcc = await Gcc.config();

    let gcc_cc = gcc.cc({
        f: [],
        W: [],
    });

    console.log(await gcc.search_dirs);*/

    let srcs = [
        "hello.c",
        "bye.c",
        "main.c"
    ].map((src) => src_dir.input(src));

    let objs = srcs.map(cc); // srcs.map((src) => gcc.compile(src));

    let bin = ld("hello", objs); //gcc.link(objs);

    build_all.inputs = bin;
}
